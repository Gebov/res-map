<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>

  <UsingTask TaskName="ResourceMapTask" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <RootNamespace Required="true" />
      <WorkDir Required="true" />
      <Inputs ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <MappingFilePath Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="$(MSBuildBinPath)\Microsoft.Build.Framework.dll"/>
      <Reference Include="$(MSBuildBinPath)\Microsoft.Build.Utilities.v12.0.dll"/>
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="System"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.Text" />
      <Code Type="Class" Language="cs">
        <![CDATA[
          public class ResourceMapTask : Microsoft.Build.Utilities.Task
          {
              [Microsoft.Build.Framework.Required]
              public Microsoft.Build.Framework.ITaskItem[] Inputs { get; set; }

              [Microsoft.Build.Framework.Required]
              public string RootNamespace { get; set; }

              [Microsoft.Build.Framework.Required]
              public string WorkDir { get; set; }

              [Microsoft.Build.Framework.Output]
              public string MappingFilePath { get; set; }

              public override bool Execute()
              {
                  var resources = new System.Collections.Generic.Dictionary<string, string>();
                  foreach (var input in this.Inputs)
                  {
                      var pair = this.GetLogicalname(input);
                      resources.Add(pair.Key, pair.Value);
                  }
                  var fileContents = this.GetFileContents(resources);

                  this.MappingFilePath = this.GenerateFile(fileContents);

                  return true;   
              }

              private System.Collections.Generic.KeyValuePair<string, string> GetLogicalname(Microsoft.Build.Framework.ITaskItem item)
              {
                  var logicalName = item.GetMetadata("LogicalName");
                  var filePath = item.GetMetadata("FullPath");
                  if (string.IsNullOrEmpty(logicalName))
                  {
                      var projectDir = item.GetMetadata("DefiningProjectDirectory");
                      var partialFilePath = filePath.Replace(projectDir, string.Empty);
                      var logicalFilePath = partialFilePath.Replace("\\", ".");
                      logicalName = string.Format("{0}.{1}", this.RootNamespace, logicalFilePath);
                  }

                  return new System.Collections.Generic.KeyValuePair<string, string>(logicalName, filePath);
              }

              private string GetFileContents(System.Collections.Generic.IDictionary<string, string> mappings)
              {
                  var contents = ResourceMapTask.EmbeddedResMapText;
                  var builder = new System.Text.StringBuilder();
                  foreach (var mapping in mappings)
                      builder.AppendFormat("\t\t\tMappings.Add(\"{0}\", @\"{1}\");", mapping.Key, mapping.Value).AppendLine();

                  return contents.Replace("INSERT_MAPPINGS_HERE", builder.ToString());
              }

              private string GenerateFile(string fileContents)
              {
                  var resMapFolder = System.IO.Path.Combine(this.WorkDir, "ResMap");
                  if (!System.IO.Directory.Exists(resMapFolder))
                      System.IO.Directory.CreateDirectory(resMapFolder);

                  var fileName = System.IO.Path.Combine(resMapFolder, "Mappings.cs");
                  using (var writer = new System.IO.StreamWriter(fileName))
                  {
                      writer.Write(fileContents);
                  }

                  return fileName;
              }

              private const string EmbeddedResMapText = @"
                  using System.Collections.Generic;
                  namespace MsBuildGenerated
                  {
                      internal class EmbeddedResMap
                      {
                          static EmbeddedResMap()
                          {
                              Mappings = new Dictionary<string, string>();
                  INSERT_MAPPINGS_HERE
                          }

                          internal static IDictionary<string, string> Mappings { get; private set; }
                      }
                  }";
          }

]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="GenerateResMappings">
    <ResourceMapTask Inputs="@(EmbeddedResource)" RootNamespace="$(RootNamespace)" WorkDir="$(BaseIntermediateOutputPath)">
      <Output TaskParameter="MappingFilePath" PropertyName="MappingFilePath"/>
    </ResourceMapTask>
    <ItemGroup>
      <Compile Include="$(MappingFilePath)">
      </Compile>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <CompileDependsOn>
      GenerateResMappings;$(CompileDependsOn)
    </CompileDependsOn>
  </PropertyGroup>
</Project>